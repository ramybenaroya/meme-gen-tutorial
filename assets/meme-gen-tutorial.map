{"version":3,"sources":["vendor/ember-cli/app-prefix.js","meme-gen-tutorial/adapters/application.js","meme-gen-tutorial/app.js","meme-gen-tutorial/components/code-snippet.js","meme-gen-tutorial/components/element-highlighter.js","meme-gen-tutorial/components/meme-item.js","meme-gen-tutorial/components/meme-list-item.js","meme-gen-tutorial/components/text-editor.js","meme-gen-tutorial/components/user-filter-toggler.js","meme-gen-tutorial/controllers/meme/edit.js","meme-gen-tutorial/controllers/memes/create.js","meme-gen-tutorial/controllers/memes/index.js","meme-gen-tutorial/controllers/spec.js","meme-gen-tutorial/controllers/spec/create-route.js","meme-gen-tutorial/controllers/spec/edit-route.js","meme-gen-tutorial/controllers/spec/meme-item.js","meme-gen-tutorial/controllers/spec/meme-list-item.js","meme-gen-tutorial/controllers/spec/memes-route.js","meme-gen-tutorial/controllers/spec/user-filter-toggler.js","meme-gen-tutorial/initializers/app-version.js","meme-gen-tutorial/initializers/current-user.js","meme-gen-tutorial/initializers/export-application-global.js","meme-gen-tutorial/initializers/meme-route-fixer.js","meme-gen-tutorial/mixins/spec-controller.js","meme-gen-tutorial/models/meme.js","meme-gen-tutorial/models/user.js","meme-gen-tutorial/router.js","meme-gen-tutorial/routes/index.js","meme-gen-tutorial/routes/meme/edit.js","meme-gen-tutorial/routes/memes.js","meme-gen-tutorial/routes/memes/create.js","meme-gen-tutorial/routes/spec.js","meme-gen-tutorial/routes/spec/create-route.js","meme-gen-tutorial/routes/spec/edit-route.js","meme-gen-tutorial/routes/spec/index.js","meme-gen-tutorial/routes/spec/meme-item.js","meme-gen-tutorial/routes/spec/meme-list-item.js","meme-gen-tutorial/routes/spec/memes-route.js","meme-gen-tutorial/routes/spec/user-filter-toggler.js","meme-gen-tutorial/serializers/application.js","meme-gen-tutorial/snippets.js","meme-gen-tutorial/templates/application.js","meme-gen-tutorial/templates/components/code-snippet.js","meme-gen-tutorial/templates/components/element-highlighter.js","meme-gen-tutorial/templates/components/meme-item.js","meme-gen-tutorial/templates/components/meme-list-item.js","meme-gen-tutorial/templates/components/text-editor.js","meme-gen-tutorial/templates/components/user-filter-toggler.js","meme-gen-tutorial/templates/frames/_create.js","meme-gen-tutorial/templates/frames/_edit.js","meme-gen-tutorial/templates/frames/_meme-item-editable.js","meme-gen-tutorial/templates/frames/_meme-item.js","meme-gen-tutorial/templates/frames/_meme-list-item-liked.js","meme-gen-tutorial/templates/frames/_meme-list-item-of-another.js","meme-gen-tutorial/templates/frames/_meme-list-item.js","meme-gen-tutorial/templates/frames/_memes.js","meme-gen-tutorial/templates/frames/_user-filter-toggler-selected.js","meme-gen-tutorial/templates/frames/_user-filter-toggler.js","meme-gen-tutorial/templates/index.js","meme-gen-tutorial/templates/meme-list-item.js","meme-gen-tutorial/templates/meme-with-controls.js","meme-gen-tutorial/templates/meme.js","meme-gen-tutorial/templates/meme/error.js","meme-gen-tutorial/templates/meme/index.js","meme-gen-tutorial/templates/memes.js","meme-gen-tutorial/templates/memes/index.js","meme-gen-tutorial/templates/spec.js","meme-gen-tutorial/templates/spec/create-route.js","meme-gen-tutorial/templates/spec/edit-route.js","meme-gen-tutorial/templates/spec/index.js","meme-gen-tutorial/templates/spec/meme-item.js","meme-gen-tutorial/templates/spec/meme-list-item.js","meme-gen-tutorial/templates/spec/memes-route.js","meme-gen-tutorial/templates/spec/user-filter-toggler.js","meme-gen-tutorial/templates/users-filter.js","meme-gen-tutorial/tests/helpers/resolver.js","meme-gen-tutorial/tests/helpers/start-app.js","meme-gen-tutorial/tests/test-helper.js","meme-gen-tutorial/tests/unit/adapters/application-test.js","meme-gen-tutorial/tests/unit/components/element-highlighter-test.js","meme-gen-tutorial/tests/unit/components/meme-item-test.js","meme-gen-tutorial/tests/unit/components/meme-list-item-test.js","meme-gen-tutorial/tests/unit/components/user-filter-toggler-test.js","meme-gen-tutorial/tests/unit/controllers/meme/edit-test.js","meme-gen-tutorial/tests/unit/controllers/memes/create-test.js","meme-gen-tutorial/tests/unit/controllers/memes/index-test.js","meme-gen-tutorial/tests/unit/controllers/spec-test.js","meme-gen-tutorial/tests/unit/controllers/spec/create-route-test.js","meme-gen-tutorial/tests/unit/controllers/spec/edit-route-test.js","meme-gen-tutorial/tests/unit/controllers/spec/meme-item-test.js","meme-gen-tutorial/tests/unit/controllers/spec/meme-list-item-test.js","meme-gen-tutorial/tests/unit/controllers/spec/memes-route-test.js","meme-gen-tutorial/tests/unit/controllers/spec/user-filter-toggler-test.js","meme-gen-tutorial/tests/unit/initializers/current-user-test.js","meme-gen-tutorial/tests/unit/initializers/meme-route-fixer-test.js","meme-gen-tutorial/tests/unit/mixins/spec-controller-test.js","meme-gen-tutorial/tests/unit/models/meme-test.js","meme-gen-tutorial/tests/unit/models/user-test.js","meme-gen-tutorial/tests/unit/routes/index-test.js","meme-gen-tutorial/tests/unit/routes/meme/edit-test.js","meme-gen-tutorial/tests/unit/routes/memes-test.js","meme-gen-tutorial/tests/unit/routes/memes/create-test.js","meme-gen-tutorial/tests/unit/routes/spec-test.js","meme-gen-tutorial/tests/unit/routes/spec/create-route-test.js","meme-gen-tutorial/tests/unit/routes/spec/edit-route-test.js","meme-gen-tutorial/tests/unit/routes/spec/index-test.js","meme-gen-tutorial/tests/unit/routes/spec/meme-item-test.js","meme-gen-tutorial/tests/unit/routes/spec/meme-list-item-test.js","meme-gen-tutorial/tests/unit/routes/spec/memes-route-test.js","meme-gen-tutorial/tests/unit/routes/spec/user-filter-toggler-test.js","meme-gen-tutorial/tests/unit/serializers/application-test.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('meme-gen-tutorial/adapters/application', ['exports', 'ember-data', 'meme-gen-tutorial/config/environment'], function (exports, DS, env) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].FirebaseAdapter.extend({\n    firebase: new Firebase(env['default'].firebase)\n  });\n\n});","define('meme-gen-tutorial/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'meme-gen-tutorial/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('meme-gen-tutorial/components/code-snippet', ['exports', 'ember', 'meme-gen-tutorial/snippets'], function (exports, Ember, Snippets) {\n\n  'use strict';\n\n  var Highlight = require(\"highlight.js\");\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"pre\",\n    classNameBindings: [\"language\"],\n    unindent: true,\n\n    _unindent: function (src) {\n      if (!this.get(\"unindent\")) {\n        return src;\n      }\n      var match,\n          min,\n          lines = src.split(\"\\n\");\n      for (var i = 0; i < lines.length; i++) {\n        match = /^\\s*/.exec(lines[i]);\n        if (match && (typeof min === \"undefined\" || min > match[0].length)) {\n          min = match[0].length;\n        }\n      }\n      if (typeof min !== \"undefined\" && min > 0) {\n        src = src.replace(new RegExp(\"(\\\\n|^)\\\\s{\" + min + \"}\", \"g\"), \"$1\");\n      }\n      return src;\n    },\n\n    source: (function () {\n      return this._unindent((Snippets['default'][this.get(\"name\")] || \"\").replace(/^(\\s*\\n)*/, \"\").replace(/\\s*$/, \"\"));\n    }).property(\"name\"),\n\n    didInsertElement: function () {\n      Highlight.highlightBlock(this.get(\"element\"));\n    },\n\n    language: (function () {\n      var m = /\\.(\\w+)$/i.exec(this.get(\"name\"));\n      if (m) {\n        switch (m[1].toLowerCase()) {\n          case \"js\":\n            return \"javascript\";\n          case \"hbs\":\n            return \"handlebars\";\n        }\n      }\n    }).property(\"name\")\n  });\n\n});","define('meme-gen-tutorial/components/element-highlighter', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var $ = Ember['default'].$;\n  exports['default'] = Ember['default'].Component.extend({\n    data: Ember['default'].A([]),\n    gotoRoute: \"gotoRoute\",\n    bindHoverEvents: (function () {\n      var self = this;\n      Ember['default'].run.scheduleOnce(\"afterRender\", this, function () {\n        Ember['default'].run.next(this, function () {\n          this.$().on(\"mouseover\", \".hljs-tag, .hljs-comment\", function (event) {\n            var $tag = $(event.currentTarget),\n                elementSelector = self.get(\"data\")[$tag.index()],\n                elementToHightlight;\n            if (elementSelector) {\n              elementToHightlight = self.$(self.get(\"data\")[$tag.index()]);\n              elementToHightlight.addClass(\"hover-highlight\");\n              $tag.one(\"mouseleave\", function () {\n                elementToHightlight.removeClass(\"hover-highlight\");\n              });\n            }\n          });\n          this.$().on(\"click\", \".hljs-comment, .hljs-value\", function (event) {\n            var $comment = $(event.currentTarget),\n                text = $comment.text().trim();\n            if (/meme-item/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.meme-item\");\n              return;\n            }\n            if (/meme-list-item/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.meme-list-item\");\n              return;\n            }\n            if (/user-filter-toggler/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.user-filter-toggler\");\n              return;\n            }\n            if (/link-to:\\/memes\\/create/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.create-route\");\n              return;\n            }\n            if (/link-to:\\/memes\\/(.*)\\/edit/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.edit-route\");\n              return;\n            }\n            if (/link-to:\\/memes/.test(text)) {\n              self.sendAction(\"gotoRoute\", \"spec.memes-route\");\n              return;\n            }\n          });\n        });\n      });\n    }).on(\"didInsertElement\")\n  });\n\n});","define('meme-gen-tutorial/components/meme-item', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    content: null,\n    classNameBindings: [\"editable\", \"notEditable\"],\n    classNames: [\"meme-item\"],\n    attributeBindings: [\"style\"],\n    editable: false,\n    notEditable: Ember['default'].computed.not(\"editable\"),\n    style: Ember['default'].computed.oneWay(\"backgroundImageStyle\"),\n    backgroundImageStyle: (function () {\n      return \"background-image: url(\" + this.get(\"content.imgSrc\") + \")\";\n    }).property(\"content.imgSrc\"),\n    openerStyle: (function () {\n      return \"font-size: \" + this.get(\"content.openerFontSize\") + \"px\";\n    }).property(\"content.openerFontSize\"),\n    closerStyle: (function () {\n      return \"font-size: \" + this.get(\"content.closerFontSize\") + \"px\";\n    }).property(\"content.closerFontSize\") });\n\n});","define('meme-gen-tutorial/components/meme-list-item', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"meme-list-item\", \"panel\", \"panel-default\"],\n    likeButtonClassName: (function () {\n      return \"btn\" + (this.get(\"content.likedByMe\") ? \" liked\" : \"\");\n    }).property(\"content.likedByMe\"),\n    actions: {\n      deleteMeme: function (meme) {\n        this.sendAction(\"deleteMeme\", meme);\n      },\n      toggleLike: function (meme) {\n        this.sendAction(\"toggleLike\", meme);\n      }\n    }\n  });\n\n});","define('meme-gen-tutorial/components/text-editor', ['exports', 'text-editor/components/text-editor'], function (exports, TextEditor) {\n\n\t'use strict';\n\n\texports['default'] = TextEditor['default'];\n\n});","define('meme-gen-tutorial/components/user-filter-toggler', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"span\",\n    classNames: [\"label\"],\n    classNameBindings: [\"selected:label-success\", \"notSelected:label-primary\"],\n    selected: false,\n    notSelected: Ember['default'].computed.not(\"selected\"),\n    click: function () {\n      this.sendAction(\"toggleUser\", this.get(\"content.id\"), !this.get(\"selected\"));\n    }\n  });\n\n});","define('meme-gen-tutorial/controllers/meme/edit', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    title: \"Edit Meme\",\n    actionName: \"Save\"\n  });\n\n});","define('meme-gen-tutorial/controllers/memes/create', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    title: \"Create Meme\",\n    actionName: \"Create\"\n  });\n\n});","define('meme-gen-tutorial/controllers/memes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var escape = window.escape;\n  exports['default'] = Ember['default'].Controller.extend({\n    queryParams: [\"filterByUsers\"],\n    searchTerm: \"\",\n    filterByUsers: Ember['default'].A([]),\n    actions: {\n      toggleUser: function (userId, isSelected) {\n        var filterByUsers = this.get(\"filterByUsers\");\n        if (isSelected) {\n          filterByUsers.addObject(userId);\n        } else {\n          filterByUsers.removeObject(userId);\n        }\n      },\n      toggleLike: function (meme) {\n        if (meme.get(\"likedByMe\")) {\n          meme.get(\"likedBy\").removeObject(this.whoami);\n        } else {\n          meme.get(\"likedBy\").addObject(this.whoami);\n        }\n        return meme.save();\n      }\n    },\n    users: (function () {\n      var users = this.get(\"model.users\");\n      if (users) {\n        users = users.map(function (user) {\n          return Ember['default'].Object.extend({\n            name: user.get(\"name\"),\n            id: user.get(\"id\"),\n            selected: false\n          }).create();\n        }, this);\n      }\n      return Ember['default'].A(users);\n    }).property(\"model.users\"),\n    updateSelectedUsers: (function () {\n      var filterByUsers = this.get(\"filterByUsers\"),\n          users = this.get(\"users\");\n      if (users && filterByUsers) {\n        users.forEach(function (user) {\n          user.set(\"selected\", filterByUsers.contains(user.get(\"id\")));\n        });\n      }\n    }).observes(\"filterByUsers.@each\", \"users\").on(\"init\"),\n    filteredMemes: Ember['default'].computed.filter(\"model.memes\", function (meme) {\n      var filterByUsers = this.get(\"filterByUsers\"),\n          searchTermRegExp = new RegExp(escape(this.get(\"searchTerm\")).toLowerCase());\n      return (filterByUsers.length === 0 || filterByUsers.contains(meme.get(\"user.id\"))) && (searchTermRegExp.test(meme.get(\"opener\").toLowerCase()) || searchTermRegExp.test(meme.get(\"closer\").toLowerCase()));\n    }).property(\"filterByUsers.@each\", \"searchTerm\", \"model.memes\")\n  });\n\n});","define('meme-gen-tutorial/controllers/spec', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    highlightData: Ember['default'].Object.create({\n      memes: Ember['default'].A([\".frame .memes-container\", \".frame .memes-container .memes-filters\", \".frame .memes-container .memes-filters .form-group:nth-child(1)\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button span\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button span\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a\", \".frame .memes-container .memes-filters .form-group:nth-child(1)\", \".frame .memes-container .memes-filters .form-group:nth-child(2)\", \".frame .memes-container .memes-filters .form-group:nth-child(2) input\", \".frame .memes-container .memes-filters .form-group:nth-child(2)\", \".frame .memes-container .memes-filters .users\", \".frame .memes-container .memes-filters .users .panel.panel-default\", \".frame .memes-container .memes-filters .users .panel .panel-heading\", \".frame .memes-container .memes-filters .users .panel .panel-heading\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel.panel-default\", \".frame .memes-container .memes-filters .users\", \".frame .memes-container .memes-filters\", \".frame .memes-container .memes-list\", \".frame .memes-container .memes-list\", \".frame .memes-container .memes-list\", \".frame .memes-container\"]),\n      userFilterToggler: Ember['default'].A([\".frame .label\", \".frame .label\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/create-route', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      create: Ember['default'].A([\".frame > .panel\", \".frame > .panel > .panel-heading\", \".frame > .panel > .panel-heading span\", \".frame > .panel > .panel-heading span\", \".frame > .panel > .panel-heading\", \".frame > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel\", \".frame > .panel > .panel-body > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3)\", \".frame > .panel > .panel-body > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel\", \".frame > .panel > .panel-body > .meme-item\", \".frame > .panel > .panel-body\", \".frame > .panel > .panel-footer\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > a\", \".frame > .panel > .panel-footer > a button\", \".frame > .panel > .panel-footer > a button\", \".frame > .panel > .panel-footer > a\", \".frame > .panel > .panel-footer\", \".frame > .panel\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/edit-route', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      edit: Ember['default'].A([\".frame > .panel\", \".frame > .panel > .panel-heading\", \".frame > .panel > .panel-heading span\", \".frame > .panel > .panel-heading span\", \".frame > .panel > .panel-heading\", \".frame > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel\", \".frame > .panel > .panel-body > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(1)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(2)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3)\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) label\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3) input\", \".frame > .panel > .panel-body > .panel > .panel-body > .form-group:nth-child(3)\", \".frame > .panel > .panel-body > .panel > .panel-body\", \".frame > .panel > .panel-body > .panel\", \".frame > .panel > .panel-body > .meme-item\", \".frame > .panel > .panel-body\", \".frame > .panel > .panel-footer\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > button\", \".frame > .panel > .panel-footer > a\", \".frame > .panel > .panel-footer > a button\", \".frame > .panel > .panel-footer > a button\", \".frame > .panel > .panel-footer > a\", \".frame > .panel > .panel-footer\", \".frame > .panel\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/meme-item', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      memeItem: Ember['default'].A([\".frame .meme-item\", \".frame .meme-item .opener\", \".frame .meme-item .opener .TextEditor\", \".frame .meme-item .opener\", \".frame .meme-item .closer\", \".frame .meme-item .closer .TextEditor\", \".frame .meme-item .closer\", \".frame .meme-item\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/meme-list-item', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      ownedByCurrentUser: Ember['default'].A([\".frame .meme-list-item\", \".frame .meme-list-item .panel-body\", \".frame .meme-list-item .panel-body .meme-item\", \".frame .meme-list-item .panel-body\", \".frame .meme-list-item .panel-footer\", \".frame .meme-list-item .panel-footer > a\", \".frame .meme-list-item .panel-footer > a button\", \".frame .meme-list-item .panel-footer > a button span\", \".frame .meme-list-item .panel-footer > a button span\", \".frame .meme-list-item .panel-footer > a button\", \".frame .meme-list-item .panel-footer > a\", null, \".frame .meme-list-item .panel-footer > button:nth-child(2)\", \".frame .meme-list-item .panel-footer > button:nth-child(2) span\", \".frame .meme-list-item .panel-footer > button:nth-child(2) span\", \".frame .meme-list-item .panel-footer > button:nth-child(2)\", null, \".frame .meme-list-item .panel-footer > button:nth-child(3)\", \".frame .meme-list-item .panel-footer > button:nth-child(3) span:nth-child(1)\", \".frame .meme-list-item .panel-footer > button:nth-child(3) span:nth-child(1)\", \".frame .meme-list-item .panel-footer > button:nth-child(3) span:nth-child(2)\", \".frame .meme-list-item .panel-footer > button:nth-child(3) span:nth-child(2)\", \".frame .meme-list-item .panel-footer > button:nth-child(3)\", \".frame .meme-list-item .panel-footer > .label\", \".frame .meme-list-item .panel-footer > .label\", \".frame .meme-list-item .panel-footer\", \".frame .meme-list-item\"]),\n      ownedByAnother: Ember['default'].A([\".frame .meme-list-item\", \".frame .meme-list-item .panel-body\", \".frame .meme-list-item .panel-body .meme-item\", \".frame .meme-list-item .panel-body\", \".frame .meme-list-item .panel-footer\", null, \".frame .meme-list-item .panel-footer > button\", \".frame .meme-list-item .panel-footer > button span:nth-child(1)\", \".frame .meme-list-item .panel-footer > button span:nth-child(1)\", \".frame .meme-list-item .panel-footer > button span:nth-child(2)\", \".frame .meme-list-item .panel-footer > button span:nth-child(2)\", \".frame .meme-list-item .panel-footer > button\", \".frame .meme-list-item .panel-footer > .label\", \".frame .meme-list-item .panel-footer > .label\", \".frame .meme-list-item .panel-footer\", \".frame .meme-list-item\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/memes-route', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      memes: Ember['default'].A([\".frame .memes-container\", \".frame .memes-container .memes-filters\", \".frame .memes-container .memes-filters .form-group:nth-child(1)\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button span\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button span\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a button\", \".frame .memes-container .memes-filters .form-group:nth-child(1) a\", \".frame .memes-container .memes-filters .form-group:nth-child(1)\", \".frame .memes-container .memes-filters .form-group:nth-child(2)\", \".frame .memes-container .memes-filters .form-group:nth-child(2) input\", \".frame .memes-container .memes-filters .form-group:nth-child(2)\", \".frame .memes-container .memes-filters .users\", \".frame .memes-container .memes-filters .users .panel.panel-default\", \".frame .memes-container .memes-filters .users .panel .panel-heading\", \".frame .memes-container .memes-filters .users .panel .panel-heading\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel .panel-body\", \".frame .memes-container .memes-filters .users .panel.panel-default\", \".frame .memes-container .memes-filters .users\", \".frame .memes-container .memes-filters\", \".frame .memes-container .memes-list\", \".frame .memes-container .memes-list\", \".frame .memes-container .memes-list\", \".frame .memes-container\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/controllers/spec/user-filter-toggler', ['exports', 'ember', 'meme-gen-tutorial/mixins/spec-controller'], function (exports, Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend(SpecControllerMixin['default'], {\n    highlightData: Ember['default'].Object.create({\n      userFilterToggler: Ember['default'].A([null, \".frame .label\", \".frame .label\"])\n    })\n  });\n\n});","define('meme-gen-tutorial/initializers/app-version', ['exports', 'meme-gen-tutorial/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function (container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('meme-gen-tutorial/initializers/current-user', ['exports', 'ember', 'meme-gen-tutorial/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var store = container.lookup(\"store:main\");\n    application.register(\"user:whoami-proxy\", Ember['default'].Object.create({\n      id: config['default'].whoami,\n      name: config['default'].whoami.capitalize()\n    }), {\n      instantiate: false,\n      singleton: true\n    });\n    application.inject(\"model\", \"whoami\", \"user:whoami-proxy\");\n    try {\n      if (store.modelFor(\"user\")) {\n        application.deferReadiness();\n        store.find(\"user\", config['default'].whoami).then(function (user) {\n          application.register(\"user:whoami\", user, {\n            instantiate: false,\n            singleton: true\n          });\n          application.inject(\"route\", \"whoami\", \"user:whoami\");\n          application.inject(\"controller\", \"whoami\", \"user:whoami\");\n          application.advanceReadiness();\n        });\n      }\n    } catch (e) {\n      application.inject(\"route\", \"whoami\", \"user:whoami-proxy\");\n      application.inject(\"controller\", \"whoami\", \"user:whoami-proxy\");\n    }\n  }\n\n  exports['default'] = {\n    name: \"current-user\",\n    after: \"store\",\n    initialize: initialize\n  };\n\n});","define('meme-gen-tutorial/initializers/export-application-global', ['exports', 'ember', 'meme-gen-tutorial/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('meme-gen-tutorial/initializers/meme-route-fixer', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var MemeRoute;\n    try {\n      MemeRoute = window.requireModule(\"meme-gen-test/routes/meme\");\n    } catch (e) {}\n\n    if (MemeRoute && MemeRoute[\"default\"]) {\n      MemeRoute = MemeRoute[\"default\"];\n    } else {\n      MemeRoute = Ember['default'].Route.extend();\n      window.define(\"meme-gen-test/routes/meme\", [\"exports\"], function (__exports__) {\n        \"use strict\";\n        __exports__[\"default\"] = MemeRoute;\n      });\n    }\n    MemeRoute.reopen({\n      actions: {\n        error: function (error, transition) {\n          var memeId = Ember['default'].get(transition, \"params.meme.meme_id\"),\n              record;\n          if (memeId) {\n            record = this.store.recordForId(\"meme\", memeId);\n            try {\n              if (record && record.get(\"isEmpty\")) {\n                this.store.unloadRecord(record);\n              }\n            } catch (e) {}\n            return this.replaceWith(\"memes\");\n          }\n        }\n      }\n    });\n  }\n\n  exports['default'] = {\n    name: \"meme-route-fixer\",\n    initialize: initialize\n  };\n  /* container, application */\n\n});","define('meme-gen-tutorial/mixins/spec-controller', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Mixin.create({\n    actions: {\n      gotoRoute: function (routename) {\n        this.transitionToRoute(routename);\n      }\n    }\n  });\n\n});","define('meme-gen-tutorial/models/meme', ['exports', 'ember-data', 'ember', 'meme-gen-tutorial/config/environment'], function (exports, DS, Ember, env) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    imgSrc: DS['default'].attr(\"string\", {\n      defaultValue: env['default'].defaultMemeImageSrc\n    }),\n    opener: DS['default'].attr(\"string\", {\n      defaultValue: \"Opener\"\n    }),\n    closer: DS['default'].attr(\"string\", {\n      defaultValue: \"Closer\"\n    }),\n    openerFontSize: DS['default'].attr(\"number\", {\n      defaultValue: 60\n    }),\n    closerFontSize: DS['default'].attr(\"number\", {\n      defaultValue: 60\n    }),\n    user: DS['default'].belongsTo(\"user\"),\n    likedBy: DS['default'].hasMany(\"user\"),\n    likes: Ember['default'].computed.oneWay(\"likedBy.length\"),\n    isMine: (function () {\n      return this.get(\"user.id\") === this.get(\"whoami.id\");\n    }).property(\"user.id\", \"whoami.id\"),\n    likedByMe: (function () {\n      return this.get(\"likedBy\").mapBy(\"id\").contains(this.get(\"whoami.id\"));\n    }).property(\"likedBy.@each\")\n  });\n\n});","define('meme-gen-tutorial/models/user', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(),\n    memes: DS['default'].hasMany(\"meme\", {\n      inverse: \"user\"\n    })\n  });\n\n});","define('meme-gen-tutorial/router', ['exports', 'ember', 'meme-gen-tutorial/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.resource(\"memes\", function () {\n      this.resource(\"meme\", {\n        path: \"/:meme_id\"\n      }, function () {\n        this.route(\"edit\");\n      });\n      this.route(\"create\");\n    });\n    this.route(\"spec\", function () {\n      this.route(\"memes-route\");\n      this.route(\"meme-list-item\");\n      this.route(\"meme-item\");\n      this.route(\"edit-route\");\n      this.route(\"create-route\");\n      this.route(\"user-filter-toggler\");\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('meme-gen-tutorial/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    redirect: function () {\n      this.transitionTo(\"memes\");\n    }\n  });\n\n});","define('meme-gen-tutorial/routes/meme/edit', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    actions: {\n      willTransition: function () {\n        this.controller.get(\"model\").rollback();\n      }\n    },\n    renderTemplate: function () {\n      this.render(\"meme-with-controls\");\n    }\n  });\n\n});","define('meme-gen-tutorial/routes/memes', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return Ember['default'].RSVP.hash({\n        memes: this.store.find(\"meme\"),\n        users: this.store.find(\"user\")\n      });\n    },\n    actions: {\n      saveMeme: function (meme) {\n        meme.save().then((function () {\n          this.transitionTo(\"memes.index\");\n        }).bind(this));\n      },\n      deleteMeme: function (meme) {\n        return meme.destroyRecord();\n      }\n    }\n  });\n\n});","define('meme-gen-tutorial/routes/memes/create', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.createRecord(\"meme\", {\n        user: this.get(\"whoami\")\n      });\n    },\n    actions: {\n      willTransition: function () {\n        this.controller.get(\"model\").rollback();\n      }\n    },\n    renderTemplate: function () {\n      this.render(\"meme-with-controls\");\n    }\n  });\n\n});","define('meme-gen-tutorial/routes/spec', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/create-route', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/edit-route', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/index', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/meme-item', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/meme-list-item', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/memes-route', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/routes/spec/user-filter-toggler', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('meme-gen-tutorial/serializers/application', ['exports', 'ember-data'], function (exports, DS) {\n\n\t'use strict';\n\n\texports['default'] = DS['default'].FirebaseSerializer.extend({});\n\n});","define('meme-gen-tutorial/snippets', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = { \"create.html\": \"<div class=\\\"panel panel-default meme-panel\\\">\\n\\t<div class=\\\"panel-heading\\\">\\n\\t\\t<span>Create Meme</span>\\n\\t</div>\\n\\t<div class=\\\"panel-body flex\\\">\\n\\t\\t<div class=\\\"panel panel-default meme-controls\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Image URL</label>\\n\\t\\t\\t\\t\\t<!-- {{input placeholder=\\\"Image URL\\\" classNames=\\\"form-control\\\" value=model.imgSrc}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Opener Font Size</label>\\n\\t\\t\\t\\t\\t<!-- {{input type=\\\"range\\\" classNames=\\\"form-control\\\" value=model.openerFontSize}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Closer Font Size</label>\\n\\t\\t\\t\\t\\t<!-- {{input type=\\\"range\\\" classNames=\\\"form-control\\\" value=model.closerFontSize}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<!-- {{meme-item editable=true content=model}} -->\\n\\t</div>\\n\\t<div class=\\\"panel-footer align-right\\\">\\n\\t\\t<!-- onclick: save new meme -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\">\\n\\t\\t\\tCreate\\n\\t\\t</button>\\n\\t\\t<a class=\\\"ember-view\\\" href=\\\"link-to:/memes\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\">\\n\\t\\t\\t\\tCancel\\n\\t\\t\\t</button>\\n\\t\\t</a>\\n\\t</div>\\n</div>\",\n    \"meme-item-editable.html\": \"<div class=\\\"meme-item\\\" style=\\\"background-image: url(meme.imgSrc)\\\">\\n\\t<div class=\\\"opener\\\" style=\\\"font-size: {{openerStyle}};\\\">\\n\\t\\t<!-- {{text-editor editable=true text=content.opener}} -->\\n\\t</div>\\n\\t<div class=\\\"closer\\\" style=\\\"font-size: {{closerStyle}};\\\">\\n\\t\\t<!-- {{text-editor editable=true text=content.closer}} -->\\n\\t</div>\\n</div>\",\n    \"edit.html\": \"<div class=\\\"panel panel-default meme-panel\\\">\\n\\t<div class=\\\"panel-heading\\\">\\n\\t\\t<span>Edit Meme</span>\\n\\t</div>\\n\\t<div class=\\\"panel-body flex\\\">\\n\\t\\t<div class=\\\"panel panel-default meme-controls\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Image URL</label>\\n\\t\\t\\t\\t\\t<!-- {{input placeholder=\\\"Image URL\\\" classNames=\\\"form-control\\\" value=model.imgSrc}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Opener Font Size</label>\\n\\t\\t\\t\\t\\t<!-- {{input type=\\\"range\\\" classNames=\\\"form-control\\\" value=model.openerFontSize}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t<label>Closer Font Size</label>\\n\\t\\t\\t\\t\\t<!-- {{input type=\\\"range\\\" classNames=\\\"form-control\\\" value=model.closerFontSize}} -->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<!-- {{meme-item editable=true content=model}} -->\\n\\t</div>\\n\\t<div class=\\\"panel-footer align-right\\\">\\n\\t\\t<!-- onclick: save meme -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\">\\n\\t\\t\\tSave\\n\\t\\t</button>\\n\\t\\t<a class=\\\"ember-view\\\" href=\\\"link-to:/memes\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\">\\n\\t\\t\\t\\tCancel\\n\\t\\t\\t</button>\\n\\t\\t</a>\\n\\t</div>\\n</div>\",\n    \"meme-item.html\": \"<div class=\\\"meme-item not-editable\\\" style=\\\"background-image: url(meme.imgSrc)\\\">\\n\\t<div class=\\\"opener\\\" style=\\\"font-size: {{openerStyle}};\\\">\\n\\t\\t<!-- {{text-editor editable=false text=content.opener}} -->\\n\\t</div>\\n\\t<div class=\\\"closer\\\" style=\\\"font-size: {{closerStyle}};\\\">\\n\\t\\t<!-- {{text-editor editable=false text=content.closer}} -->\\n\\t</div>\\n</div>\",\n    \"meme-list-item-liked.html\": \"<div class=\\\"meme-list-item panel panel-default\\\">\\n\\t<div class=\\\"panel-body\\\">\\n\\t\\t<!-- {{meme-item content=content editable=false}} -->\\n\\t</div>\\n\\t<div class=\\\"panel-footer\\\">\\n\\t\\t<a href=\\\"link-to:/memes/:meme_id/edit\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t\\t<span class=\\\"glyphicon glyphicon-pencil\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t</button>\\n\\t\\t</a>\\n\\n\\t\\t<!-- onclick : delete meme -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\" >\\n\\t\\t\\t<span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t</button>\\n\\n\\t\\t<!-- onclick : toggle like -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn liked\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t<span class=\\\"glyphicon glyphicon-heart\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t<span class=\\\"badge\\\">\\n\\t\\t\\t\\t{{content.likedBy.length}}\\n\\t\\t\\t</span>\\n\\t\\t</button>\\n\\t\\t<span class=\\\"label label-info\\\">Created by {{content.user.name}}</span>\\n\\t</div>\\n</div>\",\n    \"meme-list-item-of-another.html\": \"<div class=\\\"meme-list-item panel panel-default\\\">\\n\\t<div class=\\\"panel-body\\\">\\n\\t\\t<!-- {{meme-item content=content editable=false}} -->\\n\\t</div>\\n\\t<div class=\\\"panel-footer\\\">\\n\\n\\t\\t<!-- onclick : toggle like -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t<span class=\\\"glyphicon glyphicon-heart\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t<span class=\\\"badge\\\">\\n\\t\\t\\t\\t{{content.likedBy.length}}\\n\\t\\t\\t</span>\\n\\t\\t</button>\\n\\n\\t\\t<span class=\\\"label label-info\\\">Created by {{content.user.name}}</span>\\n\\n\\t</div>\\n</div>\",\n    \"meme-list-item.html\": \"<div class=\\\"meme-list-item panel panel-default\\\">\\n\\t<div class=\\\"panel-body\\\">\\n\\t\\t<!-- {{meme-item content=content editable=false}} -->\\n\\t</div>\\n\\t<div class=\\\"panel-footer\\\">\\n\\n\\t\\t<a href=\\\"link-to:/memes/:meme_id/edit\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t\\t<span class=\\\"glyphicon glyphicon-pencil\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t</button>\\n\\t\\t</a>\\n\\n\\t\\t<!-- onclick : delete meme -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\" >\\n\\t\\t\\t<span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t</button>\\n\\n\\t\\t<!-- onclick : toggle like -->\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t<span class=\\\"glyphicon glyphicon-heart\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t<span class=\\\"badge\\\">\\n\\t\\t\\t\\t{{content.likedBy.length}}\\n\\t\\t\\t</span>\\n\\t\\t</button>\\n\\n\\t\\t<span class=\\\"label label-info\\\">Created by {{content.user.name}}</span>\\n\\n\\t</div>\\n</div>\",\n    \"memes.html\": \"<div class=\\\"memes-container\\\">\\n\\t<div class=\\\"memes-filters\\\">\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<a href=\\\"link-to:/memes/create\\\">\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default full-width\\\" aria-label=\\\"Left Align\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"glyphicon glyphicon-plus\\\" aria-hidden=\\\"true\\\"></span>\\n\\t\\t\\t\\t\\tCreate a Meme\\n\\t\\t\\t\\t</button>\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<input class=\\\"form-control\\\" placeholder=\\\"Filter by meme text\\\" type=\\\"text\\\">\\n\\t\\t</div>\\n\\t\\t<div class=\\\"users\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-heading\\\">\\n\\t\\t\\t\\t\\tFilter by Users\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<!-- \\n\\t\\t\\t\\t\\t{{#each user in model.users}}\\n\\t\\t\\t\\t\\t\\t{{user-filter-toggler content=user}}\\n\\t\\t\\t\\t\\t{{/each}}\\n\\t\\t\\t\\t\\t-->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"memes-list\\\">\\n\\t\\t<!--\\n\\t\\t{{#each meme in filteredContent}}\\n\\t\\t\\t{{meme-list-item content=meme}}\\n\\t\\t{{/each}}\\n\\t\\t-->\\n\\t</div>\\n</div>\",\n    \"user-filter-toggler-selected.html\": \"<!-- onclick: toggle selection -->\\n<div class=\\\"label label-success\\\">\\n\\tUsername\\n</div>\",\n    \"user-filter-toggler.html\": \"<!-- onclick: toggle selection -->\\n<div class=\\\"label label-primary\\\">\\n\\tUsername\\n</div>\" };\n\n});","define('meme-gen-tutorial/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Memes\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Spec\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"nav\");\n        dom.setAttribute(el1,\"class\",\"navbar navbar-default\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"container-fluid\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"navbar-header\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        dom.setAttribute(el4,\"class\",\"navbar-brand\");\n        var el5 = dom.createTextNode(\"Meme Generator\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"collapse navbar-collapse\");\n        dom.setAttribute(el3,\"id\",\"bs-example-navbar-collapse-1\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"ul\");\n        dom.setAttribute(el4,\"class\",\"nav navbar-nav\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"li\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }\n        var element0 = dom.childAt(fragment, [0, 1, 3, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),-1,-1);\n        var morph2 = dom.createMorphAt(fragment,1,2,contextualElement);\n        block(env, morph0, context, \"link-to\", [\"memes\"], {}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"spec\"], {}, child1, null);\n        content(env, morph2, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/code-snippet', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"source\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/element-highlighter', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/meme-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"opener\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"closer\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        var attrMorph0 = dom.createAttrMorph(element0, 'style');\n        var morph1 = dom.createMorphAt(element1,0,1);\n        var attrMorph1 = dom.createAttrMorph(element1, 'style');\n        attribute(env, attrMorph0, element0, \"style\", get(env, context, \"openerStyle\"));\n        inline(env, morph0, context, \"text-editor\", [], {\"text\": get(env, context, \"content.opener\"), \"editable\": get(env, context, \"editable\")});\n        attribute(env, attrMorph1, element1, \"style\", get(env, context, \"closerStyle\"));\n        inline(env, morph1, context, \"text-editor\", [], {\"text\": get(env, context, \"content.closer\"), \"editable\": get(env, context, \"editable\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/meme-list-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn\");\n            dom.setAttribute(el1,\"aria-label\",\"Left Align\");\n            var el2 = dom.createTextNode(\"\\n\t\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"glyphicon glyphicon-pencil\");\n            dom.setAttribute(el2,\"aria-hidden\",\"true\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\t\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn\");\n          dom.setAttribute(el1,\"aria-label\",\"Left Align\");\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"glyphicon glyphicon-trash\");\n          dom.setAttribute(el2,\"aria-hidden\",\"true\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var element0 = dom.childAt(fragment, [2]);\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"link-to\", [\"meme.edit\", get(env, context, \"content\")], {}, child0, null);\n          element(env, element0, context, \"action\", [\"deleteMeme\", get(env, context, \"content\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"label label-info\");\n        var el3 = dom.createTextNode(\"Created by \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [2]);\n        var element2 = dom.childAt(element1, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,1);\n        var morph1 = dom.createMorphAt(element1,0,1);\n        var attrMorph0 = dom.createAttrMorph(element2, 'class');\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),-1,-1);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [4]),0,-1);\n        inline(env, morph0, context, \"meme-item\", [], {\"content\": get(env, context, \"content\")});\n        block(env, morph1, context, \"if\", [get(env, context, \"content.isMine\")], {}, child0, null);\n        attribute(env, attrMorph0, element2, \"class\", get(env, context, \"likeButtonClassName\"));\n        element(env, element2, context, \"action\", [\"toggleLike\", get(env, context, \"content\")], {});\n        content(env, morph2, context, \"content.likes\");\n        content(env, morph3, context, \"content.user.name\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/text-editor', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createElement(\"div\");\n          dom.setAttribute(el0,\"class\",\"document-section\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,-1,-1);\n          content(env, morph0, context, \"paragraph\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"paragraphs\")], {\"keyword\": \"paragraph\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/components/user-filter-toggler', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"content.name\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_create', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default meme-panel\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"Create Meme\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body flex\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel panel-default meme-controls\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-body\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Image URL\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Image URL\");\n        dom.setAttribute(el5,\"type\",\"text\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Opener Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Search\");\n        dom.setAttribute(el5,\"type\",\"range\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Closer Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Search\");\n        dom.setAttribute(el5,\"type\",\"range\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"ember-view meme-item editable\");\n        dom.setAttribute(el2,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"opener ui-draggable ui-draggable-handle\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; top: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"ember-view TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"true\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"closer ui-draggable ui-draggable-handle\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"ember-view TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"true\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer align-right\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn btn-success\");\n        var el3 = dom.createTextNode(\"\\n\t\t\tCreate\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-default\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\tCancel\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_edit', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default meme-panel\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"Edit Meme\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body flex\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel panel-default meme-controls\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-body\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Image URL\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Image URL\");\n        dom.setAttribute(el5,\"type\",\"text\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Opener Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Search\");\n        dom.setAttribute(el5,\"type\",\"range\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Closer Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"input\");\n        dom.setAttribute(el5,\"class\",\"ember-view ember-text-field form-control\");\n        dom.setAttribute(el5,\"placeholder\",\"Search\");\n        dom.setAttribute(el5,\"type\",\"range\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"ember-view meme-item editable\");\n        dom.setAttribute(el2,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"opener ui-draggable ui-draggable-handle\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; top: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"ember-view TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"true\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"closer ui-draggable ui-draggable-handle\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"ember-view TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"true\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer align-right\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn btn-success\");\n        var el3 = dom.createTextNode(\"\\n\t\t\tSave\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-default\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\tCancel\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_meme-item-editable', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"meme-item\");\n        dom.setAttribute(el0,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"opener\");\n        dom.setAttribute(el1,\"style\",\"font-size: 55px; top: 0px;\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"TextEditor\");\n        dom.setAttribute(el2,\"contenteditable\",\"true\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"document-section\");\n        var el4 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"closer\");\n        dom.setAttribute(el1,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"TextEditor\");\n        dom.setAttribute(el2,\"contenteditable\",\"true\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"document-section\");\n        var el4 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_meme-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el0,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"opener\");\n        dom.setAttribute(el1,\"style\",\"font-size: 55px; top: 0px;\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"TextEditor\");\n        dom.setAttribute(el2,\"contenteditable\",\"false\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"document-section\");\n        var el4 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"closer\");\n        dom.setAttribute(el1,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"TextEditor\");\n        dom.setAttribute(el2,\"contenteditable\",\"false\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"document-section\");\n        var el4 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_meme-list-item-liked', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"meme-list-item panel panel-default\");\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el2,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"opener\");\n        dom.setAttribute(el3,\"style\",\"font-size: 55px; top: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"closer\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer\");\n        var el2 = dom.createTextNode(\"\\n\t\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn\");\n        dom.setAttribute(el3,\"aria-label\",\"Left Align\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"glyphicon glyphicon-pencil\");\n        dom.setAttribute(el4,\"aria-hidden\",\"true\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-trash\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn liked\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge\");\n        var el4 = dom.createTextNode(\"0\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"label label-info\");\n        var el3 = dom.createTextNode(\"Created by User\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_meme-list-item-of-another', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"meme-list-item panel panel-default\");\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el2,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"opener\");\n        dom.setAttribute(el3,\"style\",\"font-size: 55px; top: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"closer\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge\");\n        var el4 = dom.createTextNode(\"0\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"label label-info\");\n        var el3 = dom.createTextNode(\"Created by User\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_meme-list-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"meme-list-item panel panel-default\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el2,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"opener\");\n        dom.setAttribute(el3,\"style\",\"font-size: 55px; top: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"closer\");\n        dom.setAttribute(el3,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"TextEditor\");\n        dom.setAttribute(el4,\"contenteditable\",\"false\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"document-section\");\n        var el6 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"type\",\"button\");\n        dom.setAttribute(el3,\"class\",\"btn\");\n        dom.setAttribute(el3,\"aria-label\",\"Left Align\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"glyphicon glyphicon-pencil\");\n        dom.setAttribute(el4,\"aria-hidden\",\"true\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-trash\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge\");\n        var el4 = dom.createTextNode(\"0\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"label label-info\");\n        var el3 = dom.createTextNode(\"Created by User\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_memes', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"memes-container\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"memes-filters\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"btn btn-default full-width\");\n        dom.setAttribute(el4,\"aria-label\",\"Left Align\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"glyphicon glyphicon-plus\");\n        dom.setAttribute(el5,\"aria-hidden\",\"true\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\tCreate a Meme\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"input\");\n        dom.setAttribute(el3,\"class\",\"ember-text-field form-control\");\n        dom.setAttribute(el3,\"placeholder\",\"Filter by meme text\");\n        dom.setAttribute(el3,\"type\",\"text\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"users\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel panel-default\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"panel-heading\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\tFilter by Users\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"panel-body\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Rami\\n\t\t\t\t\t\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Amir\\n\t\t\t\t\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Emmanuel\\n\t\t\t\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Eyal\\n\t\t\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Gal\\n\t\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Gennady\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Gilad\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Jonathan\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Liad\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Ronny\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Tal\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"label label-primary\");\n        var el6 = dom.createTextNode(\"Yoni\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"memes-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"meme-list-item panel panel-default\");\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-body\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el4,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"opener\");\n        dom.setAttribute(el5,\"style\",\"font-size: 55px; top: 0px;\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"TextEditor\");\n        dom.setAttribute(el6,\"contenteditable\",\"false\");\n        var el7 = dom.createElement(\"div\");\n        dom.setAttribute(el7,\"class\",\"document-section\");\n        var el8 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"closer\");\n        dom.setAttribute(el5,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"TextEditor\");\n        dom.setAttribute(el6,\"contenteditable\",\"false\");\n        var el7 = dom.createElement(\"div\");\n        dom.setAttribute(el7,\"class\",\"document-section\");\n        var el8 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-footer\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn\");\n        dom.setAttribute(el5,\"aria-label\",\"Left Align\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"glyphicon glyphicon-pencil\");\n        dom.setAttribute(el6,\"aria-hidden\",\"true\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"btn\");\n        dom.setAttribute(el4,\"aria-label\",\"Left Align\");\n        dom.setAttribute(el4,\"data-ember-action\",\"666\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"glyphicon glyphicon-trash\");\n        dom.setAttribute(el5,\"aria-hidden\",\"true\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"btn\");\n        dom.setAttribute(el4,\"data-bindattr-638\",\"638\");\n        dom.setAttribute(el4,\"aria-label\",\"Left Align\");\n        dom.setAttribute(el4,\"data-ember-action\",\"639\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el5,\"aria-hidden\",\"true\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"badge\");\n        var el6 = dom.createTextNode(\"0\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"label label-info\");\n        var el5 = dom.createTextNode(\"Created by Rami\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"meme-list-item panel panel-default\");\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-body\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"meme-item not-editable\");\n        dom.setAttribute(el4,\"style\",\"background-image: url(http://lh4.ggpht.com/NgmqkelleJw8GYypJRPyo10HUnMZ7aR8YbkT8ZNXAQC9KLChDT-yGvOy9R4WGEuEUDpjs-ERNYx6kU9PKWDS9OAtAOsp=s0)\");\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"opener\");\n        dom.setAttribute(el5,\"style\",\"font-size: 55px; top: 0px;\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"TextEditor\");\n        dom.setAttribute(el6,\"contenteditable\",\"false\");\n        var el7 = dom.createElement(\"div\");\n        dom.setAttribute(el7,\"class\",\"document-section\");\n        var el8 = dom.createTextNode(\"Opener\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"closer\");\n        dom.setAttribute(el5,\"style\",\"font-size: 60px; bottom: 0px;\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"div\");\n        dom.setAttribute(el6,\"class\",\"TextEditor\");\n        dom.setAttribute(el6,\"contenteditable\",\"false\");\n        var el7 = dom.createElement(\"div\");\n        dom.setAttribute(el7,\"class\",\"document-section\");\n        var el8 = dom.createTextNode(\"Closer\");\n        dom.appendChild(el7, el8);\n        dom.appendChild(el6, el7);\n        var el7 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-footer\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"a\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn\");\n        dom.setAttribute(el5,\"aria-label\",\"Left Align\");\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"glyphicon glyphicon-pencil\");\n        dom.setAttribute(el6,\"aria-hidden\",\"true\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"btn\");\n        dom.setAttribute(el4,\"aria-label\",\"Left Align\");\n        dom.setAttribute(el4,\"data-ember-action\",\"666\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"glyphicon glyphicon-trash\");\n        dom.setAttribute(el5,\"aria-hidden\",\"true\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"btn\");\n        dom.setAttribute(el4,\"data-bindattr-638\",\"638\");\n        dom.setAttribute(el4,\"aria-label\",\"Left Align\");\n        dom.setAttribute(el4,\"data-ember-action\",\"639\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el5,\"aria-hidden\",\"true\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"badge\");\n        var el6 = dom.createTextNode(\"0\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        dom.setAttribute(el4,\"class\",\"label label-info\");\n        var el5 = dom.createTextNode(\"Created by Rami\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_user-filter-toggler-selected', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"label label-success\");\n        var el1 = dom.createTextNode(\"Username\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/frames/_user-filter-toggler', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"label label-primary\");\n        var el1 = dom.createTextNode(\"Username\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/meme-list-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn\");\n            dom.setAttribute(el1,\"aria-label\",\"Left Align\");\n            var el2 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            dom.setAttribute(el2,\"class\",\"glyphicon glyphicon-pencil\");\n            dom.setAttribute(el2,\"aria-hidden\",\"true\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn\");\n          dom.setAttribute(el1,\"aria-label\",\"Left Align\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"glyphicon glyphicon-trash\");\n          dom.setAttribute(el2,\"aria-hidden\",\"true\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var element0 = dom.childAt(fragment, [2]);\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"link-to\", [\"meme.edit\", get(env, context, \"meme\")], {}, child0, null);\n          element(env, element0, context, \"action\", [\"deleteMeme\", get(env, context, \"meme\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"  \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"  \t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"aria-label\",\"Left Align\");\n        var el3 = dom.createTextNode(\"\\n\t  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"glyphicon glyphicon-heart\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"label label-info\");\n        var el3 = dom.createTextNode(\"Created by \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block, attribute = hooks.attribute, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [3]);\n        var element2 = dom.childAt(element1, [2]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n        var morph1 = dom.createMorphAt(element1,0,1);\n        var attrMorph0 = dom.createAttrMorph(element2, 'class');\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),-1,-1);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [4]),0,-1);\n        inline(env, morph0, context, \"meme-item\", [], {\"content\": get(env, context, \"content\")});\n        block(env, morph1, context, \"if\", [get(env, context, \"content.isMine\")], {}, child0, null);\n        attribute(env, attrMorph0, element2, \"class\", \":btn content.likedByMe:liked\");\n        element(env, element2, context, \"action\", [\"toggleLike\", get(env, context, \"content\")], {});\n        content(env, morph2, context, \"content.likes\");\n        content(env, morph3, context, \"content.user.name\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/meme-with-controls', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn btn-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\tCancel\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default meme-panel\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body flex\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel panel-default meme-controls\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel-body\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Image URL\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Opener Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"form-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"label\");\n        var el6 = dom.createTextNode(\"Closer Font Size\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-footer align-right\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"btn btn-success\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\t\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, inline = hooks.inline, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [3]);\n        var element1 = dom.childAt(element0, [1, 1]);\n        var element2 = dom.childAt(fragment, [5]);\n        var element3 = dom.childAt(element2, [1]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [1]),2,3);\n        var morph2 = dom.createMorphAt(dom.childAt(element1, [3]),2,3);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [5]),2,3);\n        var morph4 = dom.createMorphAt(element0,2,3);\n        var morph5 = dom.createMorphAt(element3,0,1);\n        var morph6 = dom.createMorphAt(element2,2,3);\n        content(env, morph0, context, \"title\");\n        inline(env, morph1, context, \"input\", [], {\"classNames\": \"form-control\", \"placeholder\": \"Image URL\", \"value\": get(env, context, \"model.imgSrc\")});\n        inline(env, morph2, context, \"input\", [], {\"type\": \"range\", \"classNames\": \"form-control\", \"value\": get(env, context, \"model.openerFontSize\")});\n        inline(env, morph3, context, \"input\", [], {\"type\": \"range\", \"classNames\": \"form-control\", \"value\": get(env, context, \"model.closerFontSize\")});\n        inline(env, morph4, context, \"meme-item\", [], {\"editable\": true, \"content\": get(env, context, \"model\")});\n        element(env, element3, context, \"action\", [\"saveMeme\", get(env, context, \"model\")], {});\n        content(env, morph5, context, \"actionName\");\n        block(env, morph6, context, \"link-to\", [\"memes.index\"], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/meme', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/meme/error', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default meme-panel\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        var el3 = dom.createTextNode(\"Error\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\tCould not find meme\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/meme/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        inline(env, morph0, context, \"meme-item\", [], {\"editable\": true, \"content\": get(env, context, \"model\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/memes', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/memes/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"type\",\"button\");\n          dom.setAttribute(el1,\"class\",\"btn btn-default full-width\");\n          dom.setAttribute(el1,\"aria-label\",\"Left Align\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"glyphicon glyphicon-plus\");\n          dom.setAttribute(el2,\"aria-hidden\",\"true\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t  Create a Meme\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"user-filter-toggler\", [], {\"tagName\": \"div\", \"content\": get(env, context, \"user\"), \"toggleUser\": \"toggleUser\", \"selected\": get(env, context, \"user.selected\")});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"meme-list-item\", [], {\"content\": get(env, context, \"meme\"), \"toggleLike\": \"toggleLike\", \"deleteMeme\": \"deleteMeme\"});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body center\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t    No memes were found\\n\t\t\t  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"memes-container\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"memes-filters\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"form-group\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"users\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"panel panel-default\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"panel-heading\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\tFilter by Users\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"panel-body\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"memes-list\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5, 1, 3]),0,1);\n        var morph3 = dom.createMorphAt(dom.childAt(fragment, [3]),0,1);\n        block(env, morph0, context, \"link-to\", [\"memes.create\"], {}, child0, null);\n        inline(env, morph1, context, \"input\", [], {\"value\": get(env, context, \"searchTerm\"), \"classNames\": \"form-control\", \"placeholder\": \"Filter by meme text\"});\n        block(env, morph2, context, \"each\", [get(env, context, \"users\")], {\"keyword\": \"user\"}, child1, null);\n        block(env, morph3, context, \"each\", [get(env, context, \"filteredMemes\")], {\"keyword\": \"meme\"}, child2, child3);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"/memes\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"/memes/create\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"/memes/:meme_id/edit\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"meme-list-item\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"user-filter-toggler\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child5 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"meme-item\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"row\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-xs-2\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"h4\");\n        var el5 = dom.createTextNode(\"Routes\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"list-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"h4\");\n        var el5 = dom.createTextNode(\"Components\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"list-group\");\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"col-xs-10\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1, 1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [3]);\n        var element3 = dom.childAt(element1, [7]);\n        var morph0 = dom.createMorphAt(element2,0,1);\n        var morph1 = dom.createMorphAt(element2,1,2);\n        var morph2 = dom.createMorphAt(element2,2,3);\n        var morph3 = dom.createMorphAt(element3,0,1);\n        var morph4 = dom.createMorphAt(element3,1,2);\n        var morph5 = dom.createMorphAt(element3,2,3);\n        var morph6 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n        block(env, morph0, context, \"link-to\", [\"spec.memes-route\"], {\"classNames\": \"list-group-item\"}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"spec.create-route\"], {\"classNames\": \"list-group-item\"}, child1, null);\n        block(env, morph2, context, \"link-to\", [\"spec.edit-route\"], {\"classNames\": \"list-group-item\"}, child2, null);\n        block(env, morph3, context, \"link-to\", [\"spec.meme-list-item\"], {\"classNames\": \"list-group-item\"}, child3, null);\n        block(env, morph4, context, \"link-to\", [\"spec.user-filter-toggler\"], {\"classNames\": \"list-group-item\"}, child4, null);\n        block(env, morph5, context, \"link-to\", [\"spec.meme-item\"], {\"classNames\": \"list-group-item\"}, child5, null);\n        content(env, morph6, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/create-route', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"/memes/create\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.5\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/create\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"create.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.create\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/edit-route', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"/memes/:meme_id/edit\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.5\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/edit\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"edit.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.edit\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/meme-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Not Editable\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.7;\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/meme-item\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"meme-item.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Editable\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.7;\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/meme-item-editable\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"meme-item-editable.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createElement(\"h3\");\n        dom.setAttribute(el2,\"class\",\"panel-title\");\n        var el3 = dom.createTextNode(\"meme-item Component\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [3]);\n        if (this.cachedFragment) { dom.repairClonedNode(element2,[1]); }\n        var morph0 = dom.createMorphAt(element2,0,1);\n        var morph1 = dom.createMorphAt(element2,1,2);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.memeItem\")}, child0, null);\n        block(env, morph1, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.memeItem\")}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/meme-list-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Does not belong to current user; Not liked by current user\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.7;\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element2, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/meme-list-item-of-another\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"meme-list-item-of-another.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Belongs to current user; Not liked by current user\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.7;\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/meme-list-item\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"meme-list-item.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Belongs to current user; Liked by current user\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom:0.7;\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/meme-list-item-liked\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"meme-list-item-liked.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createElement(\"h3\");\n        dom.setAttribute(el2,\"class\",\"panel-title\");\n        var el3 = dom.createTextNode(\"meme-list-item Component\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element3 = dom.childAt(fragment, [3]);\n        if (this.cachedFragment) { dom.repairClonedNode(element3,[1,2]); }\n        var morph0 = dom.createMorphAt(element3,0,1);\n        var morph1 = dom.createMorphAt(element3,1,2);\n        var morph2 = dom.createMorphAt(element3,2,3);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.ownedByAnother\")}, child0, null);\n        block(env, morph1, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.ownedByCurrentUser\")}, child1, null);\n        block(env, morph2, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.ownedByCurrentUser\")}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/memes-route', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"/memes\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          dom.setAttribute(el4,\"style\",\"zoom: 0.4\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/memes\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"memes.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.memes\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/spec/user-filter-toggler', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Not Selected\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/user-filter-toggler\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"user-filter-toggler.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel panel-default\");\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-heading\");\n          var el3 = dom.createElement(\"h3\");\n          dom.setAttribute(el3,\"class\",\"panel-title\");\n          var el4 = dom.createTextNode(\"Selected\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"panel-body\");\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"row\");\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6 frame\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"col-xs-6\");\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n\t\t\t\t\t\t\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n\t\t\t\t\t\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\t\t\t\t\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\t\t\t\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3, 1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n          inline(env, morph0, context, \"partial\", [\"frames/user-filter-toggler-selected\"], {});\n          inline(env, morph1, context, \"code-snippet\", [], {\"name\": \"user-filter-toggler-selected.html\", \"indent\": false, \"language\": \"html\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"panel panel-default\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-heading\");\n        var el2 = dom.createElement(\"h3\");\n        dom.setAttribute(el2,\"class\",\"panel-title\");\n        var el3 = dom.createTextNode(\"user-filter-toggler Component\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel-body\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [3]);\n        if (this.cachedFragment) { dom.repairClonedNode(element2,[1]); }\n        var morph0 = dom.createMorphAt(element2,0,1);\n        var morph1 = dom.createMorphAt(element2,1,2);\n        block(env, morph0, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.userFilterToggler\")}, child0, null);\n        block(env, morph1, context, \"element-highlighter\", [], {\"data\": get(env, context, \"highlightData.userFilterToggler\")}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/templates/users-filter', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"user-filter-toggler\", [], {\"tagName\": \"div\", \"content\": get(env, context, \"user\"), \"toggleUser\": \"toggleUser\", \"selected\": get(env, context, \"user.selected\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createElement(\"div\");\n        dom.setAttribute(el0,\"class\",\"users\");\n        var el1 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel panel-default\");\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel-heading\");\n        var el3 = dom.createTextNode(\"\\n\t\t\tFilter by Users\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel-body\");\n        var el3 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),0,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"users\")], {\"keyword\": \"user\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('meme-gen-tutorial/tests/helpers/resolver', ['exports', 'ember/resolver', 'meme-gen-tutorial/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('meme-gen-tutorial/tests/helpers/start-app', ['exports', 'ember', 'meme-gen-tutorial/app', 'meme-gen-tutorial/router', 'meme-gen-tutorial/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n  exports['default'] = startApp;\n\n});","define('meme-gen-tutorial/tests/test-helper', ['meme-gen-tutorial/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n\tdocument.write(\"<div id=\\\"ember-testing-container\\\"><div id=\\\"ember-testing\\\"></div></div>\");\n\n\tQUnit.config.urlConfig.push({ id: \"nocontainer\", label: \"Hide container\" });\n\tvar containerVisibility = QUnit.urlParams.nocontainer ? \"hidden\" : \"visible\";\n\tdocument.getElementById(\"ember-testing-container\").style.visibility = containerVisibility;\n\n});","define('meme-gen-tutorial/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:application\", \"ApplicationAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var adapter = this.subject();\n    ok(adapter);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('meme-gen-tutorial/tests/unit/components/element-highlighter-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"element-highlighter\", \"ElementHighlighterComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('meme-gen-tutorial/tests/unit/components/meme-item-test', ['ember-qunit', 'meme-gen-tutorial/config/environment'], function (ember_qunit, env) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"meme-item\", \"MemeItemComponent\", {\n    // specify the other units that are required for this test\n    needs: [\"component:text-editor\", \"template:components/text-editor\"]\n  });\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject({\n      content: {\n        imgSrc: env['default'].defaultMemeImageSrc,\n        opener: \"Opener\",\n        closer: \"Closer\",\n        openerFontSize: 60,\n        closerFontSize: 60,\n        openerPosition: null,\n        closerPosition: null },\n      editable: false\n    });\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n\n});","define('meme-gen-tutorial/tests/unit/components/meme-list-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"meme-list-item\", \"MemeListItemComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('meme-gen-tutorial/tests/unit/components/user-filter-toggler-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"user-filter-toggler\", \"UserFilterTogglerComponent\", {});\n\n  ember_qunit.test(\"it renders\", function () {\n    expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    equal(component._state, \"preRender\");\n\n    // appends the component to the page\n    this.append();\n    equal(component._state, \"inDOM\");\n  });\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/meme/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:meme/edit\", \"MemeEditController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/memes/create-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:memes/create\", \"MemesCreateController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/memes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:memes/index\", \"MemesIndexController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec\", \"SpecController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/create-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/create-route\", \"SpecCreateRouteController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/edit-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/edit-route\", \"SpecEditRouteController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/meme-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/meme-item\", \"SpecMemeItemController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/meme-list-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/meme-list-item\", \"SpecMemeListItemController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/memes-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/memes-route\", \"SpecMemesRouteController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/controllers/spec/user-filter-toggler-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:spec/user-filter-toggler\", \"SpecUserFilterTogglerController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/initializers/current-user-test', ['ember', 'meme-gen-tutorial/initializers/current-user'], function (Ember, current_user) {\n\n  'use strict';\n\n  var container, application;\n\n  module(\"CurrentUserInitializer\", {\n    setup: function () {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    current_user.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('meme-gen-tutorial/tests/unit/initializers/meme-route-fixer-test', ['ember', 'meme-gen-tutorial/initializers/meme-route-fixer'], function (Ember, meme_route_fixer) {\n\n  'use strict';\n\n  var container, application;\n\n  module(\"MemeRouteFixerInitializer\", {\n    setup: function () {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    meme_route_fixer.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    ok(true);\n  });\n\n});","define('meme-gen-tutorial/tests/unit/mixins/spec-controller-test', ['ember', 'meme-gen-tutorial/mixins/spec-controller'], function (Ember, SpecControllerMixin) {\n\n  'use strict';\n\n  module(\"SpecControllerMixin\");\n\n  // Replace this with your real tests.\n  test(\"it works\", function () {\n    var SpecControllerObject = Ember['default'].Object.extend(SpecControllerMixin['default']);\n    var subject = SpecControllerObject.create();\n    ok(subject);\n  });\n\n});","define('meme-gen-tutorial/tests/unit/models/meme-test', ['ember-qunit', 'meme-gen-tutorial/models/user'], function (ember_qunit, User) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"meme\", \"Meme\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:user\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('meme-gen-tutorial/tests/unit/models/user-test', ['ember-qunit', 'meme-gen-tutorial/models/meme'], function (ember_qunit, Meme) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"user\", \"User\", {\n    // Specify the other units that are required for this test.\n    needs: [\"model:meme\"]\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('meme-gen-tutorial/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:index\", \"IndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/meme/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:meme/edit\", \"MemeEditRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/memes-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:memes\", \"MemesRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/memes/create-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:memes/create\", \"MemesCreateRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec\", \"SpecRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/create-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/create-route\", \"SpecCreateRouteRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/edit-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/edit-route\", \"SpecEditRouteRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/index\", \"SpecIndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/meme-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/meme-item\", \"SpecMemeItemRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/meme-list-item-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/meme-list-item\", \"SpecMemeListItemRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/memes-route-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/memes-route\", \"SpecMemesRouteRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/routes/spec/user-filter-toggler-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:spec/user-filter-toggler\", \"SpecUserFilterTogglerRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('meme-gen-tutorial/tests/unit/serializers/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"serializer:application\", \"ApplicationSerializer\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var serializer = this.subject();\n    ok(serializer);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('meme-gen-tutorial/config/environment', ['ember'], function(Ember) {\n  var prefix = 'meme-gen-tutorial';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"meme-gen-tutorial/tests/test-helper\");\n} else {\n  require(\"meme-gen-tutorial/app\")[\"default\"].create({\"name\":\"meme-gen-tutorial\",\"version\":\"0.0.0.062398a3\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnnNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnrcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxztSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxxzxxnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"meme-gen-tutorial.js"}